{"ast":null,"code":"var _jsxFileName = \"/home/bryan/teste/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport Listproduct from \"./components/Listproduct\"; //hook = useState\n//hook = useEffect\n//pesquisar um item = filtrar\n//criar um item = criar\n//      alterado  alterador\n//const [name,    setName] = useState([])\n//props e childres e a maneira que temos de cascatiar os componentes\n//dataBase ele sempre e imutavel aos olhos do cliente então utilizamos sempre um filter para mostrar itens que recebemos\n//useEffetc: eu vou observa apenas apos o ciclo de atualização \n//React e imutavel !== let !== \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // lembrar do motivo de usar dois!\n  const [name, setName] = useState([]);\n  const [value, setValue] = useState([]);\n  const [dataBase, setDataBase] = useState([]);\n  const [filter, setFilter] = useState([]);\n  useEffect(() => {\n    setFilter(dataBase);\n  }, [dataBase]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      name: name,\n      setName: setName,\n      value: value,\n      setValue: setValue,\n      dataBase: dataBase,\n      setDataBase: setDataBase,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Listproduct, {\n      dataBase: dataBase,\n      filter: filter,\n      setDataBase: setDataBase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2PrEVb+RxxpaCaybqprbuejbYhE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/bryan/teste/src/App.js"],"names":["useState","useEffect","Form","Listproduct","App","name","setName","value","setValue","dataBase","setDataBase","filter","setFilter"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AAEA;;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,SAAS,CAACH,QAAD,CAAT;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEJ,IAAZ;AAAkB,MAAA,OAAO,EAAEC,OAA3B;AAAoC,MAAA,KAAK,EAAEC,KAA3C;AAAkD,MAAA,QAAQ,EAAEC,QAA5D;AAAsE,MAAA,QAAQ,EAAEC,QAAhF;AAA0F,MAAA,WAAW,EAAEC,WAAvG;AAAoH,MAAA,SAAS,EAAEE;AAA/H;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEH,QAAvB;AAAiC,MAAA,MAAM,EAAEE,MAAzC;AAAiD,MAAA,WAAW,EAAED;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAnBQN,G;;KAAAA,G;AAqBT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport Listproduct from \"./components/Listproduct\"\n\n//hook = useState\n//hook = useEffect\n\n//pesquisar um item = filtrar\n//criar um item = criar\n\n//      alterado  alterador\n//const [name,    setName] = useState([])\n\n\n//props e childres e a maneira que temos de cascatiar os componentes\n\n//dataBase ele sempre e imutavel aos olhos do cliente então utilizamos sempre um filter para mostrar itens que recebemos\n\n//useEffetc: eu vou observa apenas apos o ciclo de atualização \n\n//React e imutavel !== let !== \n\n\n\nfunction App() {\n\n  // lembrar do motivo de usar dois!\n  const [name, setName] = useState([])\n  const [value, setValue] = useState([])\n  const [dataBase, setDataBase] = useState([])\n  const [filter, setFilter] = useState([])\n  \n\n  useEffect(()=>{\n    setFilter(dataBase)\n  }, [dataBase])\n\n  return (\n    <div className=\"App\">\n     <Form name={name} setName={setName} value={value} setValue={setValue} dataBase={dataBase} setDataBase={setDataBase} setFilter={setFilter}/>\n     <Listproduct dataBase={dataBase} filter={filter} setDataBase={setDataBase}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}